var listToSend = new Sequence();
var result:Real = 0;
var stringToSend:String = "";

//Numero de Atores
result = Actor.getAllOfType().size();
listToSend.add(new Tuple(id = "numAtores", value = result));

//Numero de Use Case
result = UseCase.getAllOfType().size();
listToSend.add(new Tuple(id = "numUseCase", value = result));

//Numero de Includes
result = Include.getAllOfType().size();
listToSend.add(new Tuple(id = "numIncludes", value = result));

//Numero de Extends
result =Extend.getAllOfType().size();
listToSend.add(new Tuple(id = "numExtends", value = result));

//Numero de Hierarquias de Atores
result = hierarchyNumberActors();
listToSend.add(new Tuple(id = "numHierarquiaAtores", value = result));

//Numero de Hierarquias de UseCases
result = hierarchyNumberUseCases();
listToSend.add(new Tuple(id = "numHierarquiaUseCases", value = result));



//BEGIN escrever para o ficheiro
for (r : Tuple in listToSend) {
	var tupleString:String = r.id + "-" + r.value + ",";
	stringToSend = stringToSend.concat(tupleString);
}

if(stringToSend.length() > 0){
	stringToSend = stringToSend.substring(0, stringToSend.length() - 1);
}

var absolutePath = System.context.module.getSourceFile().path;
var directory = absolutePath.substring(0, absolutePath.length() - 12);

var file = new Native("java.io.File")(directory + "auxFile.txt");
var signalsWriter := new Native('java.io.FileWriter')(file);
signalsWriter.write(stringToSend, 0, stringToSend.length());
signalsWriter.close();
//END escrever para o ficheiro


// operation Numero de Hierarquias de Atores
operation hierarchyNumberActors(): Integer {
	var counter = 0;
	for(a : Actor in Actor.getAllOfType()){
		if(a.generalization.size > 0){
			counter++;
		}
	}
	return counter;
}

// operation Numero de Hierarquias de UseCases
operation hierarchyNumberUseCases(): Integer {
	var counter = 0;
	for(u : UseCase in UseCase.getAllOfType()){
		if(u.generalization.size > 0){
			counter++;
		}
	}
	return counter;
}



