context Class {
	
	//verifica se classes não estáticas possuem operações estáticas
	constraint AbstractOperationInNonAbstractClass {
	
		check: self.abstractOperationInNonAbstractClass() 

		message: "Classe " + self.name + " não é abstrata mas possui operações abstratas."
	
	}
	
	//verifica se existe profundidade de herança superior a 1
	critique ExcedesheritageDepth {
	
		check: self.heritageDepth() < 2

		message: "Classe " + self.name + " possui uma profundidade de herança superior a 1."
	
	}
	
	//
	constraint Test {
	
		check: self.test() 

		message: "test"
	
	}

}


//operacao que verfica que classes não estáticas possuem operações estáticas
operation Class abstractOperationInNonAbstractClass() {
 if(self.isAbstract == false){
 	var operations = self.operations;
 	for(o : Operation in operations){
 		if(o.isAbstract){
 			return false;
 		}
 		
 	}
 	
 }
 return true;
}

//operacao que devolve profundidade de herança
@cached
operation Class heritageDepth() : Integer {
  if (self.generalization.size() == 0) {
    return 0;
  }
  else {
    return 1 + self.generalization.get(0).general.heritageDepth();
  }
}

operation Class test(){
	self.name.println();
	for(a in self.attributes){
		if(a.type.qualifiedName == "UML::Property"){
			a.println();
		}
	}
	return true;
}





