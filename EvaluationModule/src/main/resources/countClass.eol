var listToSend = new Sequence();
var result:Real = 0;
var stringToSend:String = "";

//Numero de Classes
result = Class.getAllOfType().size().println();
listToSend.add(new Tuple(id = "classNumber", value = result));

//Numero de metodos de uma classe
result = Class.getAllOfType().get(0).operations.size().println();
listToSend.add(new Tuple(id = "numMetClass", value = result));

//Numero de atributos de uma classe
result = Class.getAllOfType().get(0).attributes.size().println();
listToSend.add(new Tuple(id = "avgAttributteClass", value = result));

//Numero de Hierarquias de Classes
result = hierarchyNumberClasses();
listToSend.add(new Tuple(id = "avgHierarchyClass", value = result));

//Media de parametros por operacao
result = averageParameterOperation();
listToSend.add(new Tuple(id = "avgParameterOperation", value = result));

//teste
//Class.getAllOfType().get(1).operations.get(0).ownedparameters.println();
//Class.getAllOfType().get(1).operations.get(0).ownedparameters.get(1).direction.asString().println();
//Class.getAllOfType().get(1).operations.get(0).ownedparameters.get(2).direction.println();

//daqui para baixo escrever para o ficheiro
for (r : Tuple in listToSend) {
	var tupleString:String = r.id + "-" + r.value + ",";
	stringToSend = stringToSend.concat(tupleString);
}

if(stringToSend.length() > 0){
	stringToSend = stringToSend.substring(0, stringToSend.length() - 1);
}

var absolutePath = System.context.module.getSourceFile().path;
var directory = absolutePath.substring(0, absolutePath.length() - 14);

var file = new Native("java.io.File")(directory + "auxFile.txt");
var signalsWriter := new Native('java.io.FileWriter')(file);
signalsWriter.write(stringToSend, 0, stringToSend.length());
signalsWriter.close();

// operation Numero de Hierarquias de Classes
operation hierarchyNumberClasses(): Integer {
	var counter = 0;
	for(c : Class in Class.getAllOfType()){
		if(c.generalization.size > 0){
			counter++;
		}
	}
	return counter.println();
}

// operation M�dia de par�metros por opera��o
operation averageParameterOperation(): Integer {
	var counter = 0;
	for(c : Class in Class.getAllOfType()){
		for(o : Operation  in c.operations){
			for(p : Parameter in o.ownedparameters){
				if(p.direction.asString().equals("in")){
					counter++;
				}
			}
		}
	}
	
	var ops = Operation.getAllOfType().size();
	
	var mean : Real = 0;
	if(ops != 0){
		mean  = counter/ops;
	}
	return mean.println();
}
